{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","React","useState","highlighted","setHighlighted","contacts","setContacts","filteredContacts","setFilteredContacts","fileDelimiter","setFileDelimiter","delimiter","setDelimiter","lines","setLines","className","onDragEnter","onDragLeave","onDragOver","e","preventDefault","onDrop","Array","from","dataTransfer","files","forEach","file","a","text","i","length","charCodeAt","charAt","result","parse","header","existing","data","type","onChange","event","reader","FileReader","onloadend","readAsText","target","placeholder","value","newArray","filter","index","setLimitedArray","map","contact","Name","Address","City","PinCode","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8d48c326.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { parse } from \"papaparse\";\r\nimport \"./App.css\";\r\n\r\nexport default function App() {\r\n  const [highlighted, setHighlighted] = React.useState(false);\r\n  const [contacts, setContacts] = React.useState([]);\r\n  const [filteredContacts, setFilteredContacts] = React.useState([]);\r\n  const [fileDelimiter, setFileDelimiter] = React.useState();\r\n  const [delimiter, setDelimiter] = React.useState();\r\n  const [lines, setLines] = React.useState();\r\n\r\n  function setLimitedArray(e) {\r\n    setLines(e.target.value);\r\n    let newArray = contacts.filter((i, index) => ++index <= e.target.value);\r\n    if (e.target.value) setFilteredContacts(newArray);\r\n    else setFilteredContacts(contacts);\r\n  }\r\n\r\n  function handleChange(event) {\r\n    let reader = new FileReader();\r\n    reader.onloadend = () => {\r\n      const text = reader.result;\r\n      for (var i = 0; i < text.length; i++) {\r\n        if (\r\n          (text.charCodeAt(i) >= 33 && text.charCodeAt(i) <= 47) ||\r\n          (text.charCodeAt(i) >= 123 && text.charCodeAt(i) <= 126)\r\n        ) {\r\n          setDelimiter(text.charAt(i));\r\n          setFileDelimiter(text.charAt(i));\r\n        }\r\n      }\r\n      const result = parse(text, { header: true });\r\n      setFilteredContacts((existing) => [...existing, ...result.data]);\r\n      setContacts((existing) => [...existing, ...result.data]);\r\n    };\r\n    reader.readAsText(event.target.files[0]);\r\n  }\r\n\r\n  return (\r\n    <div className=\"main-body\">\r\n      <h1 className=\"text-center text-4xl\">Contact Import</h1>\r\n      <div\r\n        className={`${highlighted ? \"border-green\" : \"border-gray\"}`}\r\n        onDragEnter={() => {\r\n          setHighlighted(true);\r\n        }}\r\n        onDragLeave={() => {\r\n          setHighlighted(false);\r\n        }}\r\n        onDragOver={(e) => {\r\n          e.preventDefault();\r\n        }}\r\n        onDrop={(e) => {\r\n          e.preventDefault();\r\n          setHighlighted(false);\r\n          Array.from(e.dataTransfer.files).forEach(async (file) => {\r\n            const text = await file.text();\r\n            for (var i = 0; i < text.length; i++) {\r\n              if (\r\n                (text.charCodeAt(i) >= 33 && text.charCodeAt(i) <= 47) ||\r\n                (text.charCodeAt(i) >= 123 && text.charCodeAt(i) <= 126)\r\n              ) {\r\n                setDelimiter(text.charAt(i));\r\n                setFileDelimiter(text.charAt(i));\r\n              }\r\n            }\r\n            const result = parse(text, { header: true });\r\n            setFilteredContacts((existing) => [...existing, ...result.data]);\r\n            setContacts((existing) => [...existing, ...result.data]);\r\n          });\r\n        }}\r\n      >\r\n        <span>DROP HERE or </span>\r\n        <input type=\"file\" className=\"upload-button\" onChange={handleChange} />\r\n      </div>\r\n      <div className=\"input-section\">\r\n        <input\r\n          className=\"border-input\"\r\n          type=\"text\"\r\n          placeholder=\"Delimiter\"\r\n          value={delimiter}\r\n          onChange={(e) => setDelimiter(e.target.value)}\r\n        />\r\n        <input\r\n          className=\"border-input\"\r\n          type=\"number\"\r\n          placeholder=\"No. of lines\"\r\n          value={lines}\r\n          onChange={(e) => setLimitedArray(e)}\r\n        />\r\n      </div>\r\n      {contacts.length > 0 && delimiter === fileDelimiter ? (\r\n        <table>\r\n          {filteredContacts.map((contact, index) => (\r\n            <tr>\r\n              <td>{contact.Name}</td>\r\n              <td>{contact.Address} </td>\r\n              <td>{contact.City} </td>\r\n              <td>{contact.PinCode}</td>\r\n            </tr>\r\n          ))}\r\n        </table>\r\n      ) : (\r\n        <table>\r\n          {filteredContacts.map((contact, index) => (\r\n            <tr>\r\n              <td>\r\n                {contact.Name}\r\n                {fileDelimiter}\r\n                {contact.Address}\r\n                {fileDelimiter}\r\n                {contact.City}\r\n                {fileDelimiter}\r\n                {contact.PinCode}\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </table>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./assets/main.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}